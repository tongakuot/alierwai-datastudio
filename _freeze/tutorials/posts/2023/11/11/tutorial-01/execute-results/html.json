{
  "hash": "2cc7384f22a379811878fed62a75abf0",
  "result": {
    "markdown": "---\ntitle: \"Solving R 4 Data Science, 2nd-edition: Section 25.3.5 Exercises.\"\ndescription: |\n  To practice R programming through hands-on exercises, as it is the best way to enhance your programming skills. In this tutorial, we will solve problems from Section 25.3.5 of the famous R 4 Data Science by Hadley Wickham et al. \ncategories:\n  - Data Science \n  - R\n  - Tutorial\nauthor: Alier Reng\ndate: 2023-11-11\ndate-format: \"D MMMM YYYY\"\nimage: images/tutorial-01-img.png\nimage-alt: Solving R 4 Data Science Exercises\ntoc: true\nfilters:\n  - lightbox\nlightbox: auto\n\ncode-block-bg: true\ncode-block-border-left: \"#31BAE9\"\n---\n\n\n# Motivation\n\nTo practice R programming through hands-on exercises, as it is the best way to enhance your programming skills.\n\nIn this tutorial, we will solve problems from Section 25.3.5 of the famous **R 4 Data Science by Hadley Wickham et al.** Let's get started!\n\n# Loading Required Libraries\n\nIn this section, we will load `tidyverse` and `nycflights13` packages.\nWe will set `warning` and `message` to false to suppress warnings and notifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n# Section 25.3.5 Exercises\n\n1)  Using the datasets from nycflights13, write a function that:\n\n-   Finds all flights that were cancelled (i.e. is.na(arr_time)) or delayed by more than an hour. About the author\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # Subset flights data\ncanceled_or_delayed_flights <- \n\tflights |>\n  filter(is.na(arr_time) | dep_delay > 1)\n\n# Write a function\nfilter_severe <- function(data, condition) {\n  data |>\n    filter({{ condition }})\n}\n\n# Let's test our function\ncanceled_or_delayed_flights <- \n\tflights |> \n\tfilter_severe(is.na(arr_time) | dep_delay > 1)\n\n# Display the results\ncanceled_or_delayed_flights |> \n\tslice_head(n = 5) |> \n\tknitr::kable(align = \"c\")\n```\n\n::: {.cell-output-display}\n| year | month | day | dep_time | sched_dep_time | dep_delay | arr_time | sched_arr_time | arr_delay | carrier | flight | tailnum | origin | dest | air_time | distance | hour | minute |      time_hour      |\n|:----:|:-----:|:---:|:--------:|:--------------:|:---------:|:--------:|:--------------:|:---------:|:-------:|:------:|:-------:|:------:|:----:|:--------:|:--------:|:----:|:------:|:-------------------:|\n| 2013 |   1   |  1  |   517    |      515       |     2     |   830    |      819       |    11     |   UA    |  1545  | N14228  |  EWR   | IAH  |   227    |   1400   |  5   |   15   | 2013-01-01 05:00:00 |\n| 2013 |   1   |  1  |   533    |      529       |     4     |   850    |      830       |    20     |   UA    |  1714  | N24211  |  LGA   | IAH  |   227    |   1416   |  5   |   29   | 2013-01-01 05:00:00 |\n| 2013 |   1   |  1  |   542    |      540       |     2     |   923    |      850       |    33     |   AA    |  1141  | N619AA  |  JFK   | MIA  |   160    |   1089   |  5   |   40   | 2013-01-01 05:00:00 |\n| 2013 |   1   |  1  |   608    |      600       |     8     |   807    |      735       |    32     |   MQ    |  3768  | N9EAMQ  |  EWR   | ORD  |   139    |   719    |  6   |   0    | 2013-01-01 06:00:00 |\n| 2013 |   1   |  1  |   611    |      600       |    11     |   945    |      931       |    14     |   UA    |  303   | N532UA  |  JFK   | SFO  |   366    |   2586   |  6   |   0    | 2013-01-01 06:00:00 |\n:::\n:::\n\n\nIn the code snippet above, we first wrote the code for solving the problem and then converted our code into a function as instructed.\nNext, we tested our function to ensure that it works as expected.\n\n-   Counts the number of cancelled flights and the number of flights delayed by more than an hour.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write a function\nsummarize_severe <- function(data, var) {\n  data |>\n    summarize(\n      n = sum({{ var }})\n    )\n}\n\n# Test the function\ndf_0 <- flights |>\n  group_by(dest) |>\n  summarize_severe(is.na(arr_time) | dep_delay > 1)\n\n# OR ------------------------------------------------\n\n# We could do this:\nsummarise_severe <- function(data, group_var, var) {\n  data |>\n    summarize(\n      total = sum({{ var }}),\n      .by = {{ group_var }}\n    )\n}\n\n# Test the second function\ndf_1 <-\n  summarise_severe(\n    flights,\n    var = c(is.na(arr_time) | dep_delay > 1),\n    group_var = dest\n  )\n```\n:::\n\n\nIn the code snippet above, we solved a problem using two approaches.\nFirstly, we defined the function `summarize_severe()` and used it along with the `group_by()` function to calculate the total number of canceled flights and flights delayed by over one hour.\nSecondly, we defined the function `summarise_severe()` and used it with the `.by` argument in the `summarize()` function to calculate the same total.\n\nWe observed that both approaches produced similar results (we prefer the approach with the .by argument).\n\n-   Finds all flights that were cancelled or delayed by more than a user supplied number of hours.\n\n    We solved the question below with our filter function, `filter_severe()`, from problem 1 above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a user supplied number of hours\ndf_with_user_supplied_hours <-\n  flights |>\n  filter_severe(\n    is.na(arr_time) | dep_delay > 2\n  )\n```\n:::\n\n\n-   Summarizes the weather to compute the minimum, mean, and maximum, of a user supplied variable:\n\n::: aside\n::: callout-tip\n# Hint\n\nBy default, across() renames resulting columns with the pattern: {function}{column_name}, for example, temp_min.\nYou can override this behavior by setting the .names option to \"{.fn}{.col}\".\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution\nweather |>\n  summarize(\n  \t# Temperature \n    min_temp  = min(temp, na.rm = TRUE),\n    mean_temp = mean(temp, na.rm = TRUE),\n    max_temp  = max(temp, na.rm = TRUE),\n    \n    # Pressure\n    min_pressure  = min(pressure, na.rm = TRUE),\n    mean_pressure = mean(pressure, na.rm = TRUE),\n    max_pressure  = max(pressure, na.rm = TRUE),\n    \n    # Precipitation\n    min_precip  = min(precip, na.rm = TRUE),\n    mean_precip = mean(precip, na.rm = TRUE),\n    max_precip  = max(precip, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |> \n\tknitr::kable(align = \"c\")\n```\n\n::: {.cell-output-display}\n| min_temp | mean_temp | max_temp | min_pressure | mean_pressure | max_pressure | min_precip | mean_precip | max_precip |\n|:--------:|:---------:|:--------:|:------------:|:-------------:|:------------:|:----------:|:-----------:|:----------:|\n|  10.94   | 55.26039  |  100.04  |    983.8     |   1017.899    |    1042.1    |     0      |  0.0044691  |    1.21    |\n:::\n\n```{.r .cell-code}\n# Write a function\nsummarize_weather <- function(data, vars) {\n  data |>\n    summarize(\n      across({{ vars }},\n        list(\n          min  = \\(x) min(x, na.rm = TRUE),\n          mean = \\(x) mean(x, na.rm = TRUE),\n          max  = \\(x) max(x, na.rm = TRUE)\n        ),\n        .names = \"{.fn}_{.col}\"\n      )\n    ) |>\n    mutate(across(where(is.numeric), \\(x) round(x, 2)))\n}\n\n# Test the function\nweather |> \n\tsummarize_weather(c(temp, pressure, precip)) |> \n\tknitr::kable(align = \"c\")\n```\n\n::: {.cell-output-display}\n| min_temp | mean_temp | max_temp | min_pressure | mean_pressure | max_pressure | min_precip | mean_precip | max_precip |\n|:--------:|:---------:|:--------:|:------------:|:-------------:|:------------:|:----------:|:-----------:|:----------:|\n|  10.94   |   55.26   |  100.04  |    983.8     |    1017.9     |    1042.1    |     0      |      0      |    1.21    |\n:::\n:::\n\n\nIn the code chunk mentioned above, typing out all the calls can be tedious, and the code can become repetitive.\nThis is a sign that we should convert our code into a function.\nFortunately, we can quickly achieve this by inserting arguments inside doubled braces.\n\n-   Converts the user supplied variable that uses clock time (e.g., dep_time, arr_time, etc.) into a decimal time (i.e. hours + (minutes / 60)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution\nflights |>\n  select(year:sched_dep_time, arr_time, sched_arr_time) |>\n  mutate(\n    hours = floor(arr_time / 100),\n    minutes = arr_time %% 100,\n    decimal_time = hours + (minutes / 60)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 10\n    year month   day dep_time sched_dep_time arr_time sched_arr_time hours\n   <int> <int> <int>    <int>          <int>    <int>          <int> <dbl>\n 1  2013     1     1      517            515      830            819     8\n 2  2013     1     1      533            529      850            830     8\n 3  2013     1     1      542            540      923            850     9\n 4  2013     1     1      544            545     1004           1022    10\n 5  2013     1     1      554            600      812            837     8\n 6  2013     1     1      554            558      740            728     7\n 7  2013     1     1      555            600      913            854     9\n 8  2013     1     1      557            600      709            723     7\n 9  2013     1     1      557            600      838            846     8\n10  2013     1     1      558            600      753            745     7\n# ℹ 336,766 more rows\n# ℹ 2 more variables: minutes <dbl>, decimal_time <dbl>\n```\n:::\n\n```{.r .cell-code}\n# Write a function\nstandardize_time <- function(data, time_var) {\n  data |>\n    mutate(\n      # floor division\n      hours = floor({{ time_var }} / 100),\n      # extracting the remainder\n      minutes = {{ time_var }} %% 100,\n      # Convert the remainder to minutes; combine the results; round to 2\n      \"{{time_var}}\" := round(hours + minutes / 60, 2)\n    ) |> \n\t\t# Remove unnecessary columns\n\t\tselect(-hours, -minutes)\n}\n\n# OR ---------------------------------------------------------------------\n# We could simplify it further, thanks to Zakarie Hashi for the suggestion\nstandardise_time <- function(data, time_var) {\n  data |>\n    mutate(\n      # floor division, extracting the remainder,Convert the remainder to minutes; combine the results; round to 2\n      decimal_time = round(floor({{ time_var }} / 100) + ({{ time_var }} %% 100) / 60, 2)\n    )\n}\n\n# Test the function\nflights |> \n\tstandardise_time(arr_time) |> \n\tslice_head(n = 5) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 20\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# ℹ 12 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>, decimal_time <dbl>\n```\n:::\n:::\n\n\nAs we demonstrated above, it is possible to complete this task with just one line of code, as suggested by Zakarie Hashi in a LinkedIn post from last year.\nIn the function provided above, we utilized the floor() function to extract the hours and used modulo division to retrieve the remaining minutes.\nWe then combined the outcomes and rounded our answer to two decimal places.\n\n# Conclusion\n\nIn this tutorial, we have shown you how to answer selected practice problems from section 25.3.5 exercises in R for Data Science, 2nd edition by Wickham et al.\nWe have demonstrated various approaches for solving these questions wherever possible.\nAlthough we have highlighted some ways to solve these exercises, there are many other methods available.\nWe encourage you to try them out and share your answers with us and our readers.\n\n**Happy Coding** 💪!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}